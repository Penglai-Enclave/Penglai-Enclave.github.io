<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://0.0.0.0:4000/index.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2022-05-08T20:42:02+08:00</updated><id>http://0.0.0.0:4000/index.xml</id><title type="html">Penglai RISC-V TEE</title><subtitle>penglai description</subtitle><entry><title type="html">What To Remember While Hiring a Web ?</title><link href="http://0.0.0.0:4000/welcome-to-jekyll/" rel="alternate" type="text/html" title="What To Remember While Hiring a Web ?" /><published>2019-01-17T20:51:30+08:00</published><updated>2019-01-17T20:51:30+08:00</updated><id>http://0.0.0.0:4000/welcome-to-jekyll</id><content type="html" xml:base="http://0.0.0.0:4000/welcome-to-jekyll/"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.</p>

<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following:</p>

<h2 id="how-to-install">How to install</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Jekyll and Bundler gems through RubyGems</span>
~ <span class="nv">$ </span>gem <span class="nb">install </span>jekyll bundler

<span class="c"># Create a new Jekyll site at ./myblog</span>
~ <span class="nv">$ </span>jekyll new myblog

<span class="c"># Change into your new directory</span>
~ <span class="nv">$ </span><span class="nb">cd </span>myblog

<span class="c"># Build the site on the preview server</span>
~/myblog <span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve

<span class="c"># Now browse to http://localhost:4000</span>
</code></pre></div></div>

<h2 id="next-steps">Next steps</h2>

<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available.</p>

<h2 id="basic-usage">Basic usage</h2>

<p>The Jekyll gem makes a <code class="language-plaintext highlighter-rouge">jekyll</code> executable available to you in your Terminal window. You can use this command in a number of ways:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>jekyll build
<span class="c"># =&gt; The current folder will be generated into ./_site</span>

<span class="nv">$ </span>jekyll build <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The current folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--source</span> &lt;<span class="nb">source</span><span class="o">&gt;</span> <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The &lt;source&gt; folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--watch</span>
<span class="c"># =&gt; The current folder will be generated into ./_site,</span>
<span class="c">#    watched for changes, and regenerated automatically.</span>
</code></pre></div></div>

<h2 id="directory-structure">Directory structure</h2>

<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product.</p>

<p>A basic Jekyll site usually looks something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── _config.yml
├── _data
|   └── members.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.md
|   └── on-simplicity-in-technology.md
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
|   └── 2009-04-26-barcamp-boston-4-roundup.md
├── _sass
|   ├── _base.scss
|   └── _layout.scss
├── _site
├── .jekyll-metadata
└── index.html <span class="c"># can also be an 'index.md' with valid YAML Frontmatter</span>
</code></pre></div></div>

<h2 id="front-matter">Front matter</h2>

<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre></div></div>

<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available to you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on.</p>

<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>

<h2 id="where-additional-pages-live">Where additional pages live</h2>

<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of creating pages:</p>

<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>

<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the resulting URLs. By default, pages retain the same folder structure in <code class="language-plaintext highlighter-rouge">_site</code> as they do in the source directory.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.]]></summary></entry><entry><title type="html">Blog Post - Left Sidebar</title><link href="http://0.0.0.0:4000/blog-post-left-sidebar/" rel="alternate" type="text/html" title="Blog Post - Left Sidebar" /><published>2018-12-06T10:14:30+08:00</published><updated>2018-12-06T10:14:30+08:00</updated><id>http://0.0.0.0:4000/blog-post-left-sidebar</id><content type="html" xml:base="http://0.0.0.0:4000/blog-post-left-sidebar/"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.</p>

<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following:</p>

<h2 id="how-to-install">How to install</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Jekyll and Bundler gems through RubyGems</span>
~ <span class="nv">$ </span>gem <span class="nb">install </span>jekyll bundler

<span class="c"># Create a new Jekyll site at ./myblog</span>
~ <span class="nv">$ </span>jekyll new myblog

<span class="c"># Change into your new directory</span>
~ <span class="nv">$ </span><span class="nb">cd </span>myblog

<span class="c"># Build the site on the preview server</span>
~/myblog <span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve

<span class="c"># Now browse to http://localhost:4000</span>
</code></pre></div></div>

<h2 id="next-steps">Next steps</h2>

<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available.</p>

<h2 id="basic-usage">Basic usage</h2>

<p>The Jekyll gem makes a <code class="language-plaintext highlighter-rouge">jekyll</code> executable available to you in your Terminal window. You can use this command in a number of ways:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>jekyll build
<span class="c"># =&gt; The current folder will be generated into ./_site</span>

<span class="nv">$ </span>jekyll build <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The current folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--source</span> &lt;<span class="nb">source</span><span class="o">&gt;</span> <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The &lt;source&gt; folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--watch</span>
<span class="c"># =&gt; The current folder will be generated into ./_site,</span>
<span class="c">#    watched for changes, and regenerated automatically.</span>
</code></pre></div></div>

<h2 id="directory-structure">Directory structure</h2>

<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product.</p>

<p>A basic Jekyll site usually looks something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── _config.yml
├── _data
|   └── members.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.md
|   └── on-simplicity-in-technology.md
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
|   └── 2009-04-26-barcamp-boston-4-roundup.md
├── _sass
|   ├── _base.scss
|   └── _layout.scss
├── _site
├── .jekyll-metadata
└── index.html <span class="c"># can also be an 'index.md' with valid YAML Frontmatter</span>
</code></pre></div></div>

<h2 id="front-matter">Front matter</h2>

<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre></div></div>

<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available to you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on.</p>

<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>

<h2 id="where-additional-pages-live">Where additional pages live</h2>

<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of creating pages:</p>

<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>

<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the resulting URLs. By default, pages retain the same folder structure in <code class="language-plaintext highlighter-rouge">_site</code> as they do in the source directory.</p>]]></content><author><name></name></author><category term="education" /><summary type="html"><![CDATA[Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.]]></summary></entry><entry><title type="html">Blog Post - Right Sidebar</title><link href="http://0.0.0.0:4000/blog-post-right-sidebar/" rel="alternate" type="text/html" title="Blog Post - Right Sidebar" /><published>2018-12-05T10:14:30+08:00</published><updated>2018-12-05T10:14:30+08:00</updated><id>http://0.0.0.0:4000/blog-post-right-sidebar</id><content type="html" xml:base="http://0.0.0.0:4000/blog-post-right-sidebar/"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.</p>

<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following:</p>

<h2 id="how-to-install">How to install</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Jekyll and Bundler gems through RubyGems</span>
~ <span class="nv">$ </span>gem <span class="nb">install </span>jekyll bundler

<span class="c"># Create a new Jekyll site at ./myblog</span>
~ <span class="nv">$ </span>jekyll new myblog

<span class="c"># Change into your new directory</span>
~ <span class="nv">$ </span><span class="nb">cd </span>myblog

<span class="c"># Build the site on the preview server</span>
~/myblog <span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve

<span class="c"># Now browse to http://localhost:4000</span>
</code></pre></div></div>

<h2 id="next-steps">Next steps</h2>

<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available.</p>

<h2 id="basic-usage">Basic usage</h2>

<p>The Jekyll gem makes a <code class="language-plaintext highlighter-rouge">jekyll</code> executable available to you in your Terminal window. You can use this command in a number of ways:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>jekyll build
<span class="c"># =&gt; The current folder will be generated into ./_site</span>

<span class="nv">$ </span>jekyll build <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The current folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--source</span> &lt;<span class="nb">source</span><span class="o">&gt;</span> <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The &lt;source&gt; folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--watch</span>
<span class="c"># =&gt; The current folder will be generated into ./_site,</span>
<span class="c">#    watched for changes, and regenerated automatically.</span>
</code></pre></div></div>

<h2 id="directory-structure">Directory structure</h2>

<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product.</p>

<p>A basic Jekyll site usually looks something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── _config.yml
├── _data
|   └── members.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.md
|   └── on-simplicity-in-technology.md
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
|   └── 2009-04-26-barcamp-boston-4-roundup.md
├── _sass
|   ├── _base.scss
|   └── _layout.scss
├── _site
├── .jekyll-metadata
└── index.html <span class="c"># can also be an 'index.md' with valid YAML Frontmatter</span>
</code></pre></div></div>

<h2 id="front-matter">Front matter</h2>

<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre></div></div>

<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available to you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on.</p>

<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>

<h2 id="where-additional-pages-live">Where additional pages live</h2>

<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of creating pages:</p>

<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>

<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the resulting URLs. By default, pages retain the same folder structure in <code class="language-plaintext highlighter-rouge">_site</code> as they do in the source directory.</p>]]></content><author><name></name></author><category term="education" /><summary type="html"><![CDATA[consectetur adipisicing elit. Suscipit est velit similique laborum, cumque aliquam porro dicta debitis repellat, tempore dignissimos, neque ab fuga voluptatibus.]]></summary></entry><entry><title type="html">Technology placeat ipsum libero</title><link href="http://0.0.0.0:4000/technology-placeat-ipsum-libero/" rel="alternate" type="text/html" title="Technology placeat ipsum libero" /><published>2018-12-04T10:14:30+08:00</published><updated>2018-12-04T10:14:30+08:00</updated><id>http://0.0.0.0:4000/technology-placeat-ipsum-libero</id><content type="html" xml:base="http://0.0.0.0:4000/technology-placeat-ipsum-libero/"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.</p>

<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following:</p>

<h2 id="how-to-install">How to install</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Jekyll and Bundler gems through RubyGems</span>
~ <span class="nv">$ </span>gem <span class="nb">install </span>jekyll bundler

<span class="c"># Create a new Jekyll site at ./myblog</span>
~ <span class="nv">$ </span>jekyll new myblog

<span class="c"># Change into your new directory</span>
~ <span class="nv">$ </span><span class="nb">cd </span>myblog

<span class="c"># Build the site on the preview server</span>
~/myblog <span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve

<span class="c"># Now browse to http://localhost:4000</span>
</code></pre></div></div>

<h2 id="next-steps">Next steps</h2>

<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available.</p>

<h2 id="basic-usage">Basic usage</h2>

<p>The Jekyll gem makes a <code class="language-plaintext highlighter-rouge">jekyll</code> executable available to you in your Terminal window. You can use this command in a number of ways:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>jekyll build
<span class="c"># =&gt; The current folder will be generated into ./_site</span>

<span class="nv">$ </span>jekyll build <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The current folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--source</span> &lt;<span class="nb">source</span><span class="o">&gt;</span> <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The &lt;source&gt; folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--watch</span>
<span class="c"># =&gt; The current folder will be generated into ./_site,</span>
<span class="c">#    watched for changes, and regenerated automatically.</span>
</code></pre></div></div>

<h2 id="directory-structure">Directory structure</h2>

<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product.</p>

<p>A basic Jekyll site usually looks something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── _config.yml
├── _data
|   └── members.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.md
|   └── on-simplicity-in-technology.md
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
|   └── 2009-04-26-barcamp-boston-4-roundup.md
├── _sass
|   ├── _base.scss
|   └── _layout.scss
├── _site
├── .jekyll-metadata
└── index.html <span class="c"># can also be an 'index.md' with valid YAML Frontmatter</span>
</code></pre></div></div>

<h2 id="front-matter">Front matter</h2>

<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre></div></div>

<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available to you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on.</p>

<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>

<h2 id="where-additional-pages-live">Where additional pages live</h2>

<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of creating pages:</p>

<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>

<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the resulting URLs. By default, pages retain the same folder structure in <code class="language-plaintext highlighter-rouge">_site</code> as they do in the source directory.</p>]]></content><author><name></name></author><category term="technology" /><summary type="html"><![CDATA[neque ab fuga voluptatibus. Earum numquam repellat sed perspiciatis ratione explicabo, odit! Repellendus voluptatibus nemo praesentium, id facere atque eum! sit nonummy tellus velit vivamus,]]></summary></entry><entry><title type="html">Another consectetur adipisicing elit</title><link href="http://0.0.0.0:4000/another-consectetur-adipisicing-elit/" rel="alternate" type="text/html" title="Another consectetur adipisicing elit" /><published>2018-12-03T10:14:30+08:00</published><updated>2018-12-03T10:14:30+08:00</updated><id>http://0.0.0.0:4000/another-consectetur-adipisicing-elit</id><content type="html" xml:base="http://0.0.0.0:4000/another-consectetur-adipisicing-elit/"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.</p>

<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following:</p>

<h2 id="how-to-install">How to install</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Jekyll and Bundler gems through RubyGems</span>
~ <span class="nv">$ </span>gem <span class="nb">install </span>jekyll bundler

<span class="c"># Create a new Jekyll site at ./myblog</span>
~ <span class="nv">$ </span>jekyll new myblog

<span class="c"># Change into your new directory</span>
~ <span class="nv">$ </span><span class="nb">cd </span>myblog

<span class="c"># Build the site on the preview server</span>
~/myblog <span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve

<span class="c"># Now browse to http://localhost:4000</span>
</code></pre></div></div>

<h2 id="next-steps">Next steps</h2>

<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available.</p>

<h2 id="basic-usage">Basic usage</h2>

<p>The Jekyll gem makes a <code class="language-plaintext highlighter-rouge">jekyll</code> executable available to you in your Terminal window. You can use this command in a number of ways:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>jekyll build
<span class="c"># =&gt; The current folder will be generated into ./_site</span>

<span class="nv">$ </span>jekyll build <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The current folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--source</span> &lt;<span class="nb">source</span><span class="o">&gt;</span> <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The &lt;source&gt; folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--watch</span>
<span class="c"># =&gt; The current folder will be generated into ./_site,</span>
<span class="c">#    watched for changes, and regenerated automatically.</span>
</code></pre></div></div>

<h2 id="directory-structure">Directory structure</h2>

<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product.</p>

<p>A basic Jekyll site usually looks something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── _config.yml
├── _data
|   └── members.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.md
|   └── on-simplicity-in-technology.md
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
|   └── 2009-04-26-barcamp-boston-4-roundup.md
├── _sass
|   ├── _base.scss
|   └── _layout.scss
├── _site
├── .jekyll-metadata
└── index.html <span class="c"># can also be an 'index.md' with valid YAML Frontmatter</span>
</code></pre></div></div>

<h2 id="front-matter">Front matter</h2>

<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre></div></div>

<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available to you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on.</p>

<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>

<h2 id="where-additional-pages-live">Where additional pages live</h2>

<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of creating pages:</p>

<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>

<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the resulting URLs. By default, pages retain the same folder structure in <code class="language-plaintext highlighter-rouge">_site</code> as they do in the source directory.</p>]]></content><author><name></name></author><category term="ecommerce" /><category term="shoping" /><summary type="html"><![CDATA[Lacinia wisi feugiat tellus neque dui pellentesque, libero Lorem ipsum dolor sit amet, consectetur adipisicing elit.]]></summary></entry><entry><title type="html">10 essential UI (user-interface) design tips</title><link href="http://0.0.0.0:4000/10-essential-ui-user-interface-design-tips/" rel="alternate" type="text/html" title="10 essential UI (user-interface) design tips" /><published>2018-12-02T10:14:30+08:00</published><updated>2018-12-02T10:14:30+08:00</updated><id>http://0.0.0.0:4000/10-essential-ui-user-interface-design-tips</id><content type="html" xml:base="http://0.0.0.0:4000/10-essential-ui-user-interface-design-tips/"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.</p>

<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following:</p>

<h2 id="how-to-install">How to install</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Jekyll and Bundler gems through RubyGems</span>
~ <span class="nv">$ </span>gem <span class="nb">install </span>jekyll bundler

<span class="c"># Create a new Jekyll site at ./myblog</span>
~ <span class="nv">$ </span>jekyll new myblog

<span class="c"># Change into your new directory</span>
~ <span class="nv">$ </span><span class="nb">cd </span>myblog

<span class="c"># Build the site on the preview server</span>
~/myblog <span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve

<span class="c"># Now browse to http://localhost:4000</span>
</code></pre></div></div>

<h2 id="next-steps">Next steps</h2>

<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available.</p>

<h2 id="basic-usage">Basic usage</h2>

<p>The Jekyll gem makes a <code class="language-plaintext highlighter-rouge">jekyll</code> executable available to you in your Terminal window. You can use this command in a number of ways:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>jekyll build
<span class="c"># =&gt; The current folder will be generated into ./_site</span>

<span class="nv">$ </span>jekyll build <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The current folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--source</span> &lt;<span class="nb">source</span><span class="o">&gt;</span> <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The &lt;source&gt; folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--watch</span>
<span class="c"># =&gt; The current folder will be generated into ./_site,</span>
<span class="c">#    watched for changes, and regenerated automatically.</span>
</code></pre></div></div>

<h2 id="directory-structure">Directory structure</h2>

<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product.</p>

<p>A basic Jekyll site usually looks something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── _config.yml
├── _data
|   └── members.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.md
|   └── on-simplicity-in-technology.md
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
|   └── 2009-04-26-barcamp-boston-4-roundup.md
├── _sass
|   ├── _base.scss
|   └── _layout.scss
├── _site
├── .jekyll-metadata
└── index.html <span class="c"># can also be an 'index.md' with valid YAML Frontmatter</span>
</code></pre></div></div>

<h2 id="front-matter">Front matter</h2>

<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre></div></div>

<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available to you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on.</p>

<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>

<h2 id="where-additional-pages-live">Where additional pages live</h2>

<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of creating pages:</p>

<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>

<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the resulting URLs. By default, pages retain the same folder structure in <code class="language-plaintext highlighter-rouge">_site</code> as they do in the source directory.</p>]]></content><author><name>themeix</name></author><category term="ecommerce" /><category term="shoping" /><summary type="html"><![CDATA[Here is the meta description]]></summary></entry><entry><title type="html">11 time-saving pro tips for web designers working in Webflow</title><link href="http://0.0.0.0:4000/11-time-saving-pro-tips-for-web-designers-working-in-webflow/" rel="alternate" type="text/html" title="11 time-saving pro tips for web designers working in Webflow" /><published>2018-12-01T20:14:30+08:00</published><updated>2018-12-01T20:14:30+08:00</updated><id>http://0.0.0.0:4000/11-time-saving-pro-tips-for-web-designers-working-in-webflow</id><content type="html" xml:base="http://0.0.0.0:4000/11-time-saving-pro-tips-for-web-designers-working-in-webflow/"><![CDATA[<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.</p>

<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following:</p>

<h2 id="how-to-install">How to install</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Jekyll and Bundler gems through RubyGems</span>
~ <span class="nv">$ </span>gem <span class="nb">install </span>jekyll bundler

<span class="c"># Create a new Jekyll site at ./myblog</span>
~ <span class="nv">$ </span>jekyll new myblog

<span class="c"># Change into your new directory</span>
~ <span class="nv">$ </span><span class="nb">cd </span>myblog

<span class="c"># Build the site on the preview server</span>
~/myblog <span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve

<span class="c"># Now browse to http://localhost:4000</span>
</code></pre></div></div>

<h2 id="next-steps">Next steps</h2>

<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available.</p>

<h2 id="basic-usage">Basic usage</h2>

<p>The Jekyll gem makes a <code class="language-plaintext highlighter-rouge">jekyll</code> executable available to you in your Terminal window. You can use this command in a number of ways:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>jekyll build
<span class="c"># =&gt; The current folder will be generated into ./_site</span>

<span class="nv">$ </span>jekyll build <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The current folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--source</span> &lt;<span class="nb">source</span><span class="o">&gt;</span> <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The &lt;source&gt; folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--watch</span>
<span class="c"># =&gt; The current folder will be generated into ./_site,</span>
<span class="c">#    watched for changes, and regenerated automatically.</span>
</code></pre></div></div>

<h2 id="directory-structure">Directory structure</h2>

<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product.</p>

<p>A basic Jekyll site usually looks something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── _config.yml
├── _data
|   └── members.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.md
|   └── on-simplicity-in-technology.md
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
|   └── 2009-04-26-barcamp-boston-4-roundup.md
├── _sass
|   ├── _base.scss
|   └── _layout.scss
├── _site
├── .jekyll-metadata
└── index.html <span class="c"># can also be an 'index.md' with valid YAML Frontmatter</span>
</code></pre></div></div>

<h2 id="front-matter">Front matter</h2>

<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre></div></div>

<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available to you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on.</p>

<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>

<h2 id="where-additional-pages-live">Where additional pages live</h2>

<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of creating pages:</p>

<ul>
  <li>Place named HTML or Markdown files for each page in your site’s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>

<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the resulting URLs. By default, pages retain the same folder structure in <code class="language-plaintext highlighter-rouge">_site</code> as they do in the source directory.</p>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ID</td>
      <td>The column of your product backlog item</td>
    </tr>
    <tr>
      <td>Link (optional)</td>
      <td>A URL of the product backlog item in your tracking software (if you have one)</td>
    </tr>
    <tr>
      <td>Title</td>
      <td>The summary or title or name of the product backlog item</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Title</th>
      <th>Backlog</th>
      <th>To Do</th>
      <th>Development</th>
      <th>Testing</th>
      <th>Deployment</th>
      <th>Done</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Some name</td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>State</td>
      <td>To know which PBIs are done or in progress.</td>
    </tr>
    <tr>
      <td>Type</td>
      <td>So you can have the opportunity to filter on a specific PBI type.</td>
    </tr>
    <tr>
      <td>Effort</td>
      <td>If your Scrum team is pointing your stories, you can add the estimation value here. In another post, I will explain how to compare the effort versus the actual cycle time.</td>
    </tr>
    <tr>
      <td>Cycle time</td>
      <td>We will calculate the cycle time in this column. For work in progress, this column will be blank.</td>
    </tr>
    <tr>
      <td>Age</td>
      <td>For work in progress, we want to see their current age so you can track them. It will be blank for completed PBIs.</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="technology" /><category term="education" /><summary type="html"><![CDATA[magna vivamus varius. Faucibus vestibulum faucibus elementum vulputate suscipit. Sit convallis litora nunc, vestibulum nibh tincidunt, in qui vel dui elit feugiat nulla, vehicula]]></summary></entry></feed>